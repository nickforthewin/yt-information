{"version":3,"sources":["Home.js","Video.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Home","class","id","placeholder","type","onClick","input","document","querySelector","window","location","replace","value","Video","KEY","videoId","useParams","useState","items","setItems","isLoaded","setLoaded","a","fetch","fetchItems","json","useEffect","className","map","item","snippet","title","src","frameBorder","allowFullScreen","description","statistics","likeCount","dislikeCount","viewCount","Nav","href","App","exact","path","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAgBeA,MAdf,WAMI,OACI,yBAAKC,MAAM,UACP,2BAAOC,GAAG,eAAeC,YAAY,2BAA2BC,KAAK,SACrE,4BAAQF,GAAG,SAASG,QAR5B,WACI,IAAIC,EAAQC,SAASC,cAAc,iBACnCC,OAAOC,SAASC,QAAhB,oBAAqCL,EAAMM,UAMvC,Q,uCC8BGC,MAtCf,WACI,IAAMC,EAAM,0CACJC,EAAYC,cAAZD,QAFK,EAGaE,mBAAS,IAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAIiBF,oBAAS,GAJ1B,mBAING,EAJM,KAIIC,EAJJ,iDASb,8BAAAC,EAAA,sEAC6BC,MAAM,oDAAD,OAAqDT,EAArD,eAA+DC,EAA/D,6BADlC,cACUS,EADV,gBAEwBA,EAAWC,OAFnC,OAEUP,EAFV,OAGIC,EAASD,EAAMA,OACfG,GAAU,GAJd,4CATa,sBAgBb,OAXAK,qBAAU,YALG,mCAMTF,KACD,IASEJ,EAIG,yBAAKO,UAAU,SACVT,EAAMU,KAAI,SAAAC,GAAI,OACX,6BACI,4BAAKA,EAAKC,QAAQC,OAClB,4BAAQC,IAAG,oCAA+BH,EAAK3B,IAAM+B,YAAY,IAAIC,iBAAe,IACpF,2CACA,uBAAGP,UAAU,eAAeE,EAAKC,QAAQK,aACzC,6BACA,uBAAGR,UAAU,SAAQ,uBAAGA,UAAU,qBAAwBE,EAAKO,WAAWC,WAC1E,uBAAGV,UAAU,SAAQ,uBAAGA,UAAU,uBAA0BE,EAAKO,WAAWE,cAC5E,uBAAGX,UAAU,SAAQ,uBAAGA,UAAU,eAAkBE,EAAKO,WAAWG,gBAb7E,4CCVAC,MARf,WACI,OACI,yBAAKb,UAAU,UACX,4BAAI,uBAAGc,KAAK,MAAR,gC,OCmBDC,MAlBf,WACI,OACI,yBAAKf,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,mBACd,kBAAC,EAAD,WCJJC,QACW,cAA7BpC,OAAOC,SAASoC,UAEe,UAA7BrC,OAAOC,SAASoC,UAEhBrC,OAAOC,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAAS4C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d3b901b8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Home() {\r\n    function handleClick() {\r\n        var input = document.querySelector('#search-input');\r\n        window.location.replace(`./#/video/${input.value}`)\r\n    }\r\n\r\n    return (\r\n        <div class=\"Search\">\r\n            <input id=\"search-input\" placeholder=\"Enter a youtube video ID\" type=\"text\"></input>\r\n            <button id=\"search\" onClick={handleClick}>Go</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Video() {\r\n    const KEY = \"AIzaSyAo9L34Cqn2JN9ib-3q9CBvCDm9Jtdlcv8\";\r\n    const { videoId } = useParams();\r\n    const [items, setItems] = useState([]);\r\n    const [isLoaded, setLoaded] = useState(false);\r\n    useEffect(() => {\r\n        fetchItems();\r\n    }, []);\r\n\r\n    async function fetchItems() {\r\n        const fetchItems = await fetch(`https://www.googleapis.com/youtube/v3/videos?key=${KEY}&id=${videoId}&part=snippet,statistics`);\r\n        const items = await fetchItems.json();\r\n        setItems(items.items);\r\n        setLoaded(true);\r\n    }\r\n\r\n    if (!isLoaded) {\r\n        return <div>Loading...</div>\r\n    } else {\r\n        return (\r\n            <div className=\"Video\">\r\n                {items.map(item => (\r\n                    <div>\r\n                        <h1>{item.snippet.title}</h1>\r\n                        <iframe src={`https://youtube.com/embed/${item.id}`} frameBorder=\"0\" allowFullScreen></iframe>\r\n                        <h3>Description</h3>\r\n                        <p className=\"description\">{item.snippet.description}</p>\r\n                        <hr />\r\n                        <p className=\"count\"><i className=\"fas fa-thumbs-up\"></i>{item.statistics.likeCount}</p>\r\n                        <p className=\"count\"><i className=\"fas fa-thumbs-down\"></i>{item.statistics.dislikeCount}</p>\r\n                        <p className=\"count\"><i className=\"fas fa-eye\"></i>{item.statistics.viewCount}</p>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Video;","import React from 'react';\r\n\r\nfunction Nav() {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1><a href=\"./\">YouTube Video Information</a></h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\nimport Home from './Home';\nimport Video from './Video';\nimport Nav from './NavBar';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                <Nav />\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Home />\n                    </Route>\n                    <Route exact path=\"/video/:videoId\">\n                        <Video />\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}